{% macro newlineIfNotLast isLast %}
{% if not isLast %}

{% endif %}
{% endmacro %}

{% macro condition var str version %}
{% if var.attributes.available[0].arguments[0] and var.attributes.available[0].arguments[0]|contains:str %}
#if compiler(>={{version}})
{% endif %}
{% endmacro %}

{% macro conditionend var str version %}
{% if var.attributes.available[0].arguments[0] and var.attributes.available[0].arguments[0]|contains:str %}
#endif
{% endif %}
{% endmacro %}

{% macro main type %}
// sourcery:file:{{ type.name }}+Chainable.swift
{% call condition type "iOS 16" "5.7" %}
{% call condition type "iOS 15.5" "5.6.1" %}
{% call condition type "iOS 15.4" "5.6" %}
{% call condition type "iOS 15.2" "5.5.2" %}
import {{argument.framework}}
{{type.attributes.available[0]}}
extension {{type.name}}: Chainable {
    public typealias ChainableObjectCompatible = {{ type.name }}
}

{{type.attributes.available[0]}}
public extension ChainableObject where Base: {{ type.name }} {
    {% for variable in type.allVariables|instance|openSet %}
    {% set isContains %}{% for parentVariable in type.inherits[type.inheritedTypes[0]].allVariables|instance|openSet %}{% if parentVariable.name == variable.name %}true{% endif %}{% endfor %}{% endset %}
    {% if not isContains == "true" %}
    {% call condition variable "iOS 16" "5.7" %}
    {% call condition variable "iOS 15.5" "5.6.1" %}
    {% call condition variable "iOS 15.4" "5.6" %}
    {% call condition variable "iOS 15.2" "5.5.2" %}
    {{variable.attributes.available[0]}}
    @discardableResult
    func {{ variable.name }}(_ newValue: {{ variable.typeName }}) -> Self {
        base.{{ variable.name }} = newValue
        return self
    }
    {% call conditionend variable "iOS 16" "5.7" %}
    {% call conditionend variable "iOS 15.5" "5.6.1" %}
    {% call conditionend variable "iOS 15.4" "5.6" %}
    {% call conditionend variable "iOS 15.2" "5.5.2" %}
    {% call newlineIfNotLast forloop.last %}
    {% endif %}
    {% endfor %}

    // Methods

    {% for method in type.allMethods|instance %}
    {% set isContains %}{% for parentMethod in type.inherits[type.inheritedTypes[0]].allMethods|instance %}{% if parentMethod.name == method.name %}true{% endif %}{% endfor %}{% endset %}
    {% if not isContains == "true" %}
    {% if method.actualReturnTypeName.name == "Void" %}
    {% map method.parameters into result1 %}{%if maploop.item.argumentLabel %}{{maploop.item.argumentLabel}}: {{maploop.item.name}}{% else %}{{maploop.item.name}}{% endif %}{%ifnot maploop.last %},{% endif %}{% endmap %} 
    {% if method.attributes.available[0] %}
    {% call condition method "iOS 16" "5.7" %}
    {% call condition method "iOS 15.5" "5.6.1" %}
    {% call condition method "iOS 15.4" "5.6" %}
    {% call condition method "iOS 15.2" "5.5.2" %}
    {{method.attributes.available[0]}}
    {% elif method.definedInType.isExtension %}
    {{ method.definedInType.attributes.available[0]}}
    {% endif %}
    {{definedInType.attributes.available}}
    @discardableResult
    func {{ method.name }}{% if method.throws %} throws {% endif %} -> Self {
        {% if method.throws %}try {% endif %}base.{{ method.callName }}({% for p in result1 %}{{ p }}{% if not forloop.last %} {% endif %}{% endfor %})
        return self
    }
    {% call conditionend method "iOS 16" "5.7" %}
    {% call conditionend method "iOS 15.5" "5.6.1" %}
    {% call conditionend method "iOS 15.4" "5.6" %}
    {% call conditionend method "iOS 15.2" "5.5.2" %}
    {% call newlineIfNotLast forloop.last %}
    {% endif %}
    {% endif %}
    {% endfor %}
}
{% call conditionend type "iOS 16" "5.7" %}
{% call conditionend type "iOS 15.5" "5.6.1" %}
{% call conditionend type "iOS 15.4" "5.6" %}
{% call conditionend type "iOS 15.2" "5.5.2" %}
// sourcery:end
{% endmacro %}


{% for type in types.implementing.NeedChainable|class %}
{% call main type %}
{% endfor %}